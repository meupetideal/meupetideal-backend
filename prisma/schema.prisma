// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())
  name String
  cpf String  @unique
  email String  @unique
  hashedPassword String @map("hashed_password")
  birthday DateTime
  phoneNumber String @map("phone_number")
  avatarUrl String? @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  address Address?
  animals Animal[]
  interests Interest[]
  passwordRecoveryTokens PasswordRecoveryToken[]
  notifications Notification[]
  reporterReports Report[]  @relation("reporter")
  accusedOwnerReports Report[]  @relation("accusedOwner")

  @@map("users")
}

model Address {
  userId String @id @map("user_id")
  neighborhood String
  city String
  state String
  country String

  user User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model PasswordRecoveryToken {
  id String @id @default(uuid())
  userId String @map("user_id")
  token String @unique
  expiresAt DateTime? @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("password_recovery_tokens")
}

model Animal {
  id String @id @default(uuid())
  ownerId String @map("owner_id")
  species String
  name String
  gender String
  approximateAge Float @map("approximate_age")
  approximateWeight Float @map("approximate_weight")
  size String
  temperaments String[]
  coatColors String[] @map("coat_colors")
  isVaccinated Boolean @map("is_vaccinated")
  isDewormed Boolean @map("is_dewormed")
  isNeutered Boolean @map("is_neutered")
  isSpecialNeeds Boolean @map("is_special_needs")
  breed String
  status String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner User @relation(fields: [ownerId], references: [id])
  photos AnimalPhoto[]
  interests Interest[]
  reports Report[]

  @@map("animals")
}

model AnimalPhoto {
  id String @id @default(uuid())
  animalId String @map("animal_id")
  photoUrl String @map("photo_url")

  animal Animal @relation(fields: [animalId], references: [id])

  @@map("animal_photos")
}

model Report {
  id String @id @default(uuid())
  reporterId String @map("reporter_id")
  accusedOwnerId String @map("accused_owner_id")
  animalId String @map("animal_id")
  reason String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  reporter User @relation("reporter", fields: [reporterId], references: [id])
  accusedOwner User @relation("accusedOwner", fields: [accusedOwnerId], references: [id])
  animal Animal @relation(fields: [animalId], references: [id])

  @@map("reports")
}

model Interest {
  id String @id @default(uuid())
  animalId String @map("animal_id")
  userId String @map("user_id")
  expressedAt DateTime @map("expressed_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  animal Animal @relation(fields: [animalId], references: [id])

  @@unique([animalId, userId])

  @@map("interests")
}

model Notification {
  id String @id @default(uuid())
  recipientId String @map("recipient_id")
  title String
  redirectToUrl String @map("redirect_to_url")
  sentAt DateTime @map("sent_at")
  readedAt DateTime? @map("readed_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  recipient User @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}

